// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/protobuf/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protobuf "login_api/internal/common/genproto/auth/api/protobuf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceSignupWithPhoneNumberProcedure is the fully-qualified name of the AuthService's
	// SignupWithPhoneNumber RPC.
	AuthServiceSignupWithPhoneNumberProcedure = "/auth.AuthService/SignupWithPhoneNumber"
	// AuthServiceVerifyAccountProcedure is the fully-qualified name of the AuthService's VerifyAccount
	// RPC.
	AuthServiceVerifyAccountProcedure = "/auth.AuthService/VerifyAccount"
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/auth.AuthService/Login"
	// AuthServiceOTPGenerateProcedure is the fully-qualified name of the AuthService's OTPGenerate RPC.
	AuthServiceOTPGenerateProcedure = "/auth.AuthService/OTPGenerate"
	// AuthServiceGetProfileProcedure is the fully-qualified name of the AuthService's GetProfile RPC.
	AuthServiceGetProfileProcedure = "/auth.AuthService/GetProfile"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor                     = protobuf.File_api_protobuf_auth_proto.Services().ByName("AuthService")
	authServiceSignupWithPhoneNumberMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("SignupWithPhoneNumber")
	authServiceVerifyAccountMethodDescriptor         = authServiceServiceDescriptor.Methods().ByName("VerifyAccount")
	authServiceLoginMethodDescriptor                 = authServiceServiceDescriptor.Methods().ByName("Login")
	authServiceOTPGenerateMethodDescriptor           = authServiceServiceDescriptor.Methods().ByName("OTPGenerate")
	authServiceGetProfileMethodDescriptor            = authServiceServiceDescriptor.Methods().ByName("GetProfile")
)

// AuthServiceClient is a client for the auth.AuthService service.
type AuthServiceClient interface {
	SignupWithPhoneNumber(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error)
	VerifyAccount(context.Context, *connect.Request[protobuf.OTP]) (*connect.Response[protobuf.UserProfile], error)
	Login(context.Context, *connect.Request[protobuf.LoginRequest]) (*connect.Response[protobuf.UserProfile], error)
	OTPGenerate(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error)
	GetProfile(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.UserProfile], error)
}

// NewAuthServiceClient constructs a client for the auth.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		signupWithPhoneNumber: connect.NewClient[protobuf.PhoneNumber, protobuf.Response](
			httpClient,
			baseURL+AuthServiceSignupWithPhoneNumberProcedure,
			connect.WithSchema(authServiceSignupWithPhoneNumberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		verifyAccount: connect.NewClient[protobuf.OTP, protobuf.UserProfile](
			httpClient,
			baseURL+AuthServiceVerifyAccountProcedure,
			connect.WithSchema(authServiceVerifyAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[protobuf.LoginRequest, protobuf.UserProfile](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		oTPGenerate: connect.NewClient[protobuf.PhoneNumber, protobuf.Response](
			httpClient,
			baseURL+AuthServiceOTPGenerateProcedure,
			connect.WithSchema(authServiceOTPGenerateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProfile: connect.NewClient[protobuf.PhoneNumber, protobuf.UserProfile](
			httpClient,
			baseURL+AuthServiceGetProfileProcedure,
			connect.WithSchema(authServiceGetProfileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	signupWithPhoneNumber *connect.Client[protobuf.PhoneNumber, protobuf.Response]
	verifyAccount         *connect.Client[protobuf.OTP, protobuf.UserProfile]
	login                 *connect.Client[protobuf.LoginRequest, protobuf.UserProfile]
	oTPGenerate           *connect.Client[protobuf.PhoneNumber, protobuf.Response]
	getProfile            *connect.Client[protobuf.PhoneNumber, protobuf.UserProfile]
}

// SignupWithPhoneNumber calls auth.AuthService.SignupWithPhoneNumber.
func (c *authServiceClient) SignupWithPhoneNumber(ctx context.Context, req *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error) {
	return c.signupWithPhoneNumber.CallUnary(ctx, req)
}

// VerifyAccount calls auth.AuthService.VerifyAccount.
func (c *authServiceClient) VerifyAccount(ctx context.Context, req *connect.Request[protobuf.OTP]) (*connect.Response[protobuf.UserProfile], error) {
	return c.verifyAccount.CallUnary(ctx, req)
}

// Login calls auth.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[protobuf.LoginRequest]) (*connect.Response[protobuf.UserProfile], error) {
	return c.login.CallUnary(ctx, req)
}

// OTPGenerate calls auth.AuthService.OTPGenerate.
func (c *authServiceClient) OTPGenerate(ctx context.Context, req *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error) {
	return c.oTPGenerate.CallUnary(ctx, req)
}

// GetProfile calls auth.AuthService.GetProfile.
func (c *authServiceClient) GetProfile(ctx context.Context, req *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.UserProfile], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.AuthService service.
type AuthServiceHandler interface {
	SignupWithPhoneNumber(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error)
	VerifyAccount(context.Context, *connect.Request[protobuf.OTP]) (*connect.Response[protobuf.UserProfile], error)
	Login(context.Context, *connect.Request[protobuf.LoginRequest]) (*connect.Response[protobuf.UserProfile], error)
	OTPGenerate(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error)
	GetProfile(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.UserProfile], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceSignupWithPhoneNumberHandler := connect.NewUnaryHandler(
		AuthServiceSignupWithPhoneNumberProcedure,
		svc.SignupWithPhoneNumber,
		connect.WithSchema(authServiceSignupWithPhoneNumberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyAccountHandler := connect.NewUnaryHandler(
		AuthServiceVerifyAccountProcedure,
		svc.VerifyAccount,
		connect.WithSchema(authServiceVerifyAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceOTPGenerateHandler := connect.NewUnaryHandler(
		AuthServiceOTPGenerateProcedure,
		svc.OTPGenerate,
		connect.WithSchema(authServiceOTPGenerateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetProfileHandler := connect.NewUnaryHandler(
		AuthServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(authServiceGetProfileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceSignupWithPhoneNumberProcedure:
			authServiceSignupWithPhoneNumberHandler.ServeHTTP(w, r)
		case AuthServiceVerifyAccountProcedure:
			authServiceVerifyAccountHandler.ServeHTTP(w, r)
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceOTPGenerateProcedure:
			authServiceOTPGenerateHandler.ServeHTTP(w, r)
		case AuthServiceGetProfileProcedure:
			authServiceGetProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) SignupWithPhoneNumber(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.SignupWithPhoneNumber is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyAccount(context.Context, *connect.Request[protobuf.OTP]) (*connect.Response[protobuf.UserProfile], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.VerifyAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[protobuf.LoginRequest]) (*connect.Response[protobuf.UserProfile], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) OTPGenerate(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.OTPGenerate is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetProfile(context.Context, *connect.Request[protobuf.PhoneNumber]) (*connect.Response[protobuf.UserProfile], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.GetProfile is not implemented"))
}
