// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/protobuf/communication.proto

package communicationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protobuf "login_api/internal/common/genproto/communication/api/protobuf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommunicationServiceName is the fully-qualified name of the CommunicationService service.
	CommunicationServiceName = "communication.CommunicationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommunicationServicePingProcedure is the fully-qualified name of the CommunicationService's Ping
	// RPC.
	CommunicationServicePingProcedure = "/communication.CommunicationService/Ping"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	communicationServiceServiceDescriptor    = protobuf.File_api_protobuf_communication_proto.Services().ByName("CommunicationService")
	communicationServicePingMethodDescriptor = communicationServiceServiceDescriptor.Methods().ByName("Ping")
)

// CommunicationServiceClient is a client for the communication.CommunicationService service.
type CommunicationServiceClient interface {
	Ping(context.Context, *connect.Request[protobuf.Request]) (*connect.Response[protobuf.Response], error)
}

// NewCommunicationServiceClient constructs a client for the communication.CommunicationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommunicationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommunicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &communicationServiceClient{
		ping: connect.NewClient[protobuf.Request, protobuf.Response](
			httpClient,
			baseURL+CommunicationServicePingProcedure,
			connect.WithSchema(communicationServicePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// communicationServiceClient implements CommunicationServiceClient.
type communicationServiceClient struct {
	ping *connect.Client[protobuf.Request, protobuf.Response]
}

// Ping calls communication.CommunicationService.Ping.
func (c *communicationServiceClient) Ping(ctx context.Context, req *connect.Request[protobuf.Request]) (*connect.Response[protobuf.Response], error) {
	return c.ping.CallUnary(ctx, req)
}

// CommunicationServiceHandler is an implementation of the communication.CommunicationService
// service.
type CommunicationServiceHandler interface {
	Ping(context.Context, *connect.Request[protobuf.Request]) (*connect.Response[protobuf.Response], error)
}

// NewCommunicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommunicationServiceHandler(svc CommunicationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	communicationServicePingHandler := connect.NewUnaryHandler(
		CommunicationServicePingProcedure,
		svc.Ping,
		connect.WithSchema(communicationServicePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/communication.CommunicationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommunicationServicePingProcedure:
			communicationServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommunicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommunicationServiceHandler struct{}

func (UnimplementedCommunicationServiceHandler) Ping(context.Context, *connect.Request[protobuf.Request]) (*connect.Response[protobuf.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("communication.CommunicationService.Ping is not implemented"))
}
